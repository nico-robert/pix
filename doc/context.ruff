# File generated by pixdoc.tcl
namespace eval ::pix {
            namespace eval ctx {
                # Ruff documentation
                variable _ruff_preamble {
            #### Note
            This namespace provides a 2D API commonly used on the web. For more info, see: [https://developer.mozilla.org/en-US/docs/Web/API/ContextRenderingContext2D] (https://developer.mozilla.org/en-US/docs/Web/API/ContextRenderingContext2D)

            #### Enum BaselineAlignment.
            BaselineAlignment - enum
            TopBaseline - &nbsp;
            HangingBaseline - &nbsp;
            MiddleBaseline - &nbsp;
            AlphabeticBaseline - &nbsp;
            IdeographicBaseline - &nbsp;
            BottomBaseline - &nbsp;

        }
            }
        }
proc pix::ctx::new {size {value {none}}} {
  # Sets a new context.
  # 
  # size  - list width + height
  # value - string color or image object 
  #
  # Returns a 'new' context object.
}
proc pix::ctx::strokeStyle {context color} {
  # Sets color style current context.
  # 
  # context - object
  # color   - string
  #
  # Returns nothing.
}
proc pix::ctx::save {context} {
  # Saves the entire state of the context by pushing the current state onto a stack.
  # 
  # context - object
  #
  # Returns nothing.
}
proc pix::ctx::textBaseline {context BaselineAlignment} {
  # Set the base line alignment for the current context.
  # 
  # context           - object
  # BaselineAlignment - Enum value
  #
  # Returns nothing.
}
proc pix::ctx::restore {context} {
  # Restores the most recently saved context state by popping the top entry 
  # in the drawing state stack. If there is no saved state, this method does nothing.
  # 
  # context - object
  #
  # Returns nothing.
}
proc pix::ctx::saveLayer {context} {
  # Saves the entire state of the context by pushing the current state onto a stack
  # and allocates a new image layer for subsequent drawing. Calling restore blends
  # the current layer image onto the prior layer or root image.
  # 
  # context - object
  #
  # Returns nothing.
}
proc pix::ctx::strokeSegment {context coordinates_1 coordinates_2} {
  # Strokes a segment (draws a line from ax, ay to bx, by) according to
  # the current strokeStyle and other context settings.
  # 
  # context        - object
  # coordinates_1  - list x,y 
  # coordinates_2  - list x1,y1
  #
  # Returns nothing.
}
proc pix::ctx::strokeRect {context coordinates size} {
  # Draws a rectangle that is stroked (outlined) according to the
  # current strokeStyle and other context settings.
  # 
  # context     - object
  # coordinates - list x,y
  # size        - list width + height
  #
  # Returns nothing.
}
proc pix::ctx::quadraticCurveTo {context coordinates_1 coordinates_2} {
  # Adds a quadratic Bézier curve to the current sub-path.
  # It requires two points: the first one is a control point and the second one is the end point.
  # The starting point is the latest point in the current path,
  # which can be changed using moveTo() before creating the quadratic Bézier curve.
  # 
  # context        - object
  # coordinates_1  - list cpx,cpy
  # coordinates_2  - list x,y 
  #
  # Returns nothing.
}
proc pix::ctx::arc {context coordinates radius angleStart angleEnd {ccw {false}}} {
  # Adds a circular arc to the current sub-path. 
  # 
  # context     - object
  # coordinates - list x,y
  # radius      - double value
  # angleStart  - double value (radian)
  # angleEnd    - double value (radian)
  # ccw         - boolean value 
  #
  # Returns nothing.
}
proc pix::ctx::arcTo {context coordinates_1 coordinates_2 radius} {
  # Adds a circular arc using the given control points and radius.
  # 
  # context       - object
  # coordinates_1 - list x1,y1
  # coordinates_2 - list x2,y2
  # radius        - double value
  #
  # Returns nothing.
}
proc pix::ctx::bezierCurveTo {context coordinates_1 coordinates_2 coordinates_3} {
  # Adds a cubic Bézier curve to the current sub-path.
  # It requires three points: the first two are control points and the third one is the end point.
  # The starting point is the latest point in the current path,
  # which can be changed using moveTo() before creating the Bézier curve.
  # 
  # context       - object
  # coordinates_1 - list cx1,cy1
  # coordinates_2 - list cx2,cy2
  # coordinates_3 - list x,y
  #
  # Returns nothing.
}
proc pix::ctx::circle {context coordinates radius} {
  # Adds a circle to the current path.
  # 
  # context      - object
  # coordinates  - list cx,cy
  # radius       - double value
  #
  # Returns nothing.
}
proc pix::ctx::clip {context {path {}} {WindingRule {NonZero}}} {
  # Turns the path into the current clipping region.
  # The previous clipping region, if any, is intersected
  # with the current or given path to create the new clipping region.
  # 
  # context     - object
  # path        - object 
  # WindingRule - Enum value 
  #
  # Returns nothing.
}
proc pix::ctx::measureText {context text} {
  # Returns a TextMetrics object that contains information
  # about the measured text (such as its width, for example).
  # 
  # context  - object
  # text     - string
  #
  # Returns Tcl dict value {width}.
}
proc pix::ctx::resetTransform {context} {
  # Resets the current transform to the identity matrix.
  # 
  # context - object
  #
  # Returns nothing.
}
proc pix::ctx::drawImage {context image args} {
  # Draws a source image onto the destination image.
  # 
  # context  - object
  # image    - object
  # args     - options described below:
  # 
  # destination                                 - list destination coordinates dx,dy <br>
  # destinationXY+destinationWH                 - list destination coordinates dx,dy <br>
  #                                               list destination size dw,dh <br>
  # source+sourceWH+destinationXY+destinationWH - list source coordinates sx,sy <br>
  #                                               list source size sW,SH <br>
  #                                               list destination coordinates dx,dy <br>
  #                                               list destination size dw,dh 
  #
  # Returns nothing.
}
proc pix::ctx::ellipse {context coordinates radiusx radiusy} {
  # Adds an ellipse to the current sub-path.
  # 
  # context     - object
  # coordinates - list x,y
  # radiusx     - double value
  # radiusy     - double value
  #
  # Returns nothing.
}
proc pix::ctx::strokeEllipse {context coordinates radiusx radiusy} {
  # Draws an ellipse that is stroked (outlined) according
  # to the current strokeStyle and other context settings.
  # 
  # context     - object
  # coordinates - list x,y
  # radiusx     - double value
  # radiusy     - double value
  #
  # Returns nothing.
}
proc pix::ctx::setTransform {context matrix3x3} {
  # Overrides the transform matrix being applied to the context.
  # 
  # context   - object
  # matrix3x3 - list
  #
  # Returns nothing.
}
proc pix::ctx::transform {context matrix3x3} {
  # Multiplies the current transform with the matrix 
  # described by the arguments of this method.
  # 
  # context   - object
  # matrix3x3 - list
  #
  # Returns nothing.
}
proc pix::ctx::rotate {context angle} {
  # Adds a rotation to the transformation matrix.
  # 
  # context - object
  # angle  - double value (radian)
  #
  # Returns nothing.
}
proc pix::ctx::translate {context coordinates} {
  # Adds a translation transformation to the current matrix.
  # 
  # context     - object
  # coordinates - list x,y
  #
  # Returns nothing.
}
proc pix::ctx::lineJoin {context LineJoin} {
  # Sets enum value.
  # 
  # context  - object
  # LineJoin - Enum value
  #
  # Returns nothing.
}
proc pix::ctx::fill {context {path {}} {WindingRule {NonZero}}} {
  # Fills the path with the current fillStyle.
  # 
  # context     - object
  # path        - object 
  # WindingRule - Enum value 
  #
  # Returns nothing.
}
proc pix::ctx::rect {context coordinates size} {
  # Adds a rectangle to the current path.
  # 
  # context     - object
  # coordinates - list x,y
  # size        - list width + height
  #
  # Returns nothing.
}
proc pix::ctx::fillRect {context coordinates size} {
  # Draws a rectangle that is filled according to the current fillStyle.
  # 
  # context     - object
  # coordinates - list x,y 
  # size        - list width + height
  #
  # Returns nothing.
}
proc pix::ctx::roundedRect {context coordinates size radius} {
  # Draws a rectangle that is filled according to the current fillStyle.
  # 
  # context      - object
  # coordinates  - list x,y
  # size         - list
  # radius       - list (nw, ne, se, sw)
  #
  # Returns nothing.
}
proc pix::ctx::fillRoundedRect {context coordinates size radius} {
  # Draws a rounded rectangle that is filled according to the current fillStyle.
  # 
  # context     - object
  # coordinates - list x,y
  # size        - list width + height
  # radius      - double value or list radius (nw, ne, se, sw) 
  #
  # Returns nothing.
}
proc pix::ctx::strokeRoundedRect {context coordinates size radius} {
  # Draws a rounded rectangle that is stroked (outlined) according
  # to the current strokeStyle and other context settings.
  # 
  # context     - object
  # coordinates - list x,y 
  # size        - list width + height
  # radius      - double value or list radius (nw, ne, se, sw)
  #
  # Returns nothing.
}
proc pix::ctx::clearRect {context coordinates size} {
  # Erases the pixels in a rectangular area.
  # 
  # context       - object
  # coordinates  - list x,y
  # size         - list width + height
  #
  # Returns nothing.
}
proc pix::ctx::fillStyle {context value} {
  # Fills current style.
  # 
  # context - object
  # value   - paint object or string color
  #
  # Returns nothing.
}
proc pix::ctx::globalAlpha {context alpha} {
  # Sets color alpha.
  # 
  # context - object
  # alpha   - double value
  #
  # Returns nothing.
}
proc pix::ctx::moveTo {context coordinates} {
  # Begins a new sub-path at the point (x, y).
  # 
  # context     - object
  # coordinates - list x,y
  #
  # Returns nothing.
}
proc pix::ctx::isPointInStroke {context coordinates {path {}}} {
  # Checks whether or not the specified point is inside the area 
  # contained by the stroking of a path.
  # 
  # context     - object
  # coordinates - list x,y
  # path        - object 
  #
  # Returns true, false otherwise.
}
proc pix::ctx::isPointInPath {context coordinates {path {}} {WindingRule {NonZero}}} {
  # Checks whether or not the specified point is contained in the current path.
  # 
  # context     - object
  # coordinates - list x,y
  # path        - object 
  # WindingRule - Enum value 
  #
  # Returns true, false otherwise.
}
proc pix::ctx::lineTo {context coordinates} {
  # Adds a straight line to the current sub-path by connecting 
  # the sub-path's last point to the specified (x, y) coordinates. 
  # 
  # context     - object
  # coordinates - list x,y
  #
  # Returns nothing.
}
proc pix::ctx::stroke {context {path {}}} {
  # Strokes (outlines) the current or given path with the current strokeStyle.
  # 
  # context - object
  # path    - object 
  #
  # Returns nothing.
}
proc pix::ctx::scale {context coordinates} {
  # Adds a scaling transformation to the context units horizontally and/or vertically.
  # 
  # context     - object
  # coordinates - list x,y
  #
  # Returns nothing.
}
proc pix::ctx::writeFile {context filePath} {
  # Save context to image file.
  # 
  # context  - object
  # filePath - string (\*.png|\*.bmp|\*.qoi|\*.ppm)
  #
  # Returns nothing.
}
proc pix::ctx::beginPath {context} {
  # Starts a new path by emptying the list of sub-paths.
  # 
  # context - object
  #
  # Returns nothing.
}
proc pix::ctx::closePath {context} {
  # Attempts to add a straight line from the current point to
  # the start of the current sub-path. If the shape has already been 
  # closed or has only one point, this function does nothing. 
  # 
  # context - object
  #
  # Returns nothing.
}
proc pix::ctx::lineWidth {context width} {
  # Sets line width for current context.
  # 
  # context - object
  # width   - double value
  #
  # Returns nothing.
}
proc pix::ctx::font {context filepath} {
  # Sets font for current context.
  # 
  # context  - object
  # filepath - string
  #
  # Returns nothing.
}
proc pix::ctx::fontSize {context size} {
  # Sets font size for current context.
  # 
  # context - object
  # size    - double value
  #
  # Returns nothing.
}
proc pix::ctx::fillText {context text coordinates} {
  # Draws a text string at the specified coordinates, 
  # filling the string's characters with the current fillStyle.
  # 
  # context     - object
  # text        - string
  # coordinates - list x,y
  #
  # Returns nothing.
}
proc pix::ctx::fillCircle {context coordinates radius} {
  # Draws a circle that is filled according to the current fillStyle
  # 
  # context     - object
  # coordinates - list cx,cy
  # radius      - double value
  #
  # Returns nothing.
}
proc pix::ctx::fillEllipse {context coordinates radiusx radiusy} {
  # Draws an ellipse that is filled according to the current fillStyle.
  # 
  # context     - object
  # coordinates - list x,y
  # radiusx     - double value
  # radiusy     - double value
  #
  # Returns nothing.
}
proc pix::ctx::fillPolygon {context coordinates size sides} {
  # Draws an n-sided regular polygon at (x, y) of size that is filled according to the current fillStyle.
  # 
  # context     - object
  # coordinates - list x,y
  # size        - double value
  # sides       - integer value
  #
  # Returns nothing.
}
proc pix::ctx::polygon {context coordinates size sides} {
  # Adds an n-sided regular polygon at (x, y) of size to the current path.
  # 
  # context     - object
  # coordinates - list x,y
  # size        - double value
  # sides       - integer value
  #
  # Returns nothing.
}
proc pix::ctx::strokePolygon {context coordinates size sides} {
  # Draws an n-sided regular polygon at (x, y) of size that is stroked 
  # (outlined) according to the current strokeStyle and other context settings.
  # 
  # context     - object
  # coordinates - list x,y
  # size        - double value
  # sides       - integer value
  #
  # Returns nothing.
}
proc pix::ctx::strokeCircle {context coordinates radius} {
  # Draws a circle that is stroked (outlined) according to the current
  # strokeStyle and other context settings.
  # 
  # context     - object
  # coordinates - list cx,cy
  # radius      - double value
  #
  # Returns nothing.
}
proc pix::ctx::strokeText {context text coordinates} {
  # Draws the outlines of the characters of a text string at the specified coordinates.
  # 
  # context     - object
  # text        - string
  # coordinates - list x,y
  #
  # Returns nothing.
}
proc pix::ctx::textAlign {context HorizontalAlignment} {
  # Sets text alignment.
  # 
  # context             - object
  # HorizontalAlignment - Enum value
  #
  # Returns nothing.
}
proc pix::ctx::get {context} {
  # Gets information context.
  # 
  # context - object
  #
  # Returns Tcl dict value.
}
proc pix::ctx::setLineDash {context dashes} {
  # Sets line dash for current context.
  # 
  # context - object
  # dashes  - list
  #
  # Returns nothing.
}
proc pix::ctx::getTransform {context} {
  # Gets matrix for current context.
  # 
  # context - object
  #
  # Returns list values.
}
proc pix::ctx::getLineDash {context values} {
  # Gets line dash for current context.
  # 
  # context - object
  # values - list
  #
  # Returns list values.
}
proc pix::ctx::destroy {value} {
  # See image fillPath
  # See image strokePath
  # Destroy current context or all contexts if special word `all` is specified.
  # 
  # value - context object or string 
  #
  # Returns nothing.
}
