# File generated by pixdoc.tcl
namespace eval ::pix {
            namespace eval font {
                # Ruff documentation
                variable _ruff_preamble {
            #### Enum HorizontalAlignment.
            HorizontalAlignment  - enum
            LeftAlign            - &nbsp;
            CenterAlign          - &nbsp;
            RightAlign           - &nbsp;

            #### Enum VerticalAlignment.
            VerticalAlignment    - enum
            TopAlign             - &nbsp;
            MiddleAlign          - &nbsp;
            BottomAlign          - &nbsp;

        }
            }
        }
proc pix::font::readFont {filePath} {
  # Loads a font from a file.
  # 
  # filePath - file font
  #
  # Returns a 'new' font object.
}
proc pix::font::size {font size} {
  # Sets font Size (Same as pix::font::configure procedure).
  # 
  # font - object
  # size  - double value
  #
  # Returns nothing.
}
proc pix::font::color {font color} {
  # Sets font color (Same as pix::font::configure procedure).
  # 
  # font - object
  # color - string or list color simple
  #
  # Returns nothing.
}
proc pix::font::newFont {typeface} {
  # Sets new Font.
  # 
  # typeface - object
  #
  # Returns a 'new' font object.
}
proc pix::font::newSpan {font text} {
  # Sets new Span.
  # 
  # font - object
  # text - string
  #
  # Returns a 'new' span object.
}
proc pix::font::paint {font {paint {}}} {
  # Sets font Paint.
  # 
  # font  - object
  # paint - object  
  #
  # Returns a 'new' paint object.
}
proc pix::font::readTypeface {filePath} {
  # Loads a typeface from a file.
  # 
  # filePath - file font
  #
  # Returns a 'new' typeface object.
}
proc pix::font::readTypefaces {filePath} {
  # Loads a OpenType Collection (.ttc).
  # 
  # filePath - file font
  #
  # Returns Tcl list <typeface> object.
}
proc pix::font::ascent {typeface} {
  # The font ascender value in font units.
  # 
  # typeface - object
  #
  # Returns Tcl double value.
}
proc pix::font::computeBounds {arrangement {transform {mat3}}} {
  # Bounds Arrangement object.
  # 
  # arrangement - object
  # transform   - matrix list 
  #
  # Returns Tcl dict value {x y w h}.
}
proc pix::font::copy {font} {
  # Copy font.
  # 
  # font - object
  #
  # Returns a 'new' font object.
}
proc pix::font::defaultLineHeight {font} {
  # The default line height in pixels for the current font size. 
  # 
  # font - object
  #
  # Returns Tcl double value.
}
proc pix::font::descent {typeface} {
  # The font descender value in font units.
  # 
  # typeface - object
  #
  # Returns Tcl double value.
}
proc pix::font::fallbackTypeface {typeface char} {
  # Looks through fallback typefaces to find one that has the glyph.
  # 
  # typeface - object
  # char     - string 'char'
  #
  # Returns a 'new' Tcl typeFace or the 
  # arg typeFace if typeface has glyph.
}
proc pix::font::getAdvance {typeface char} {
  # The advance for the rune in pixels.
  # 
  # typeface - object
  # char     - string 'char'
  #
  # Returns Tcl double value.
}
proc pix::font::getGlyphPath {typeface char} {
  # The glyph path for the rune.
  # 
  # typeface - object
  # char     - string 'char'
  #
  # Returns a 'new' path object.
}
proc pix::font::getKerningAdjustment {typeface char1 char2} {
  # The kerning adjustment for the rune pair, in pixels.
  # 
  # typeface - object
  # char1    - string 'char'
  # char2    - string 'char'
  #
  # Returns Tcl double value.
}
proc pix::font::hasGlyph {typeface char1} {
  # Returns if there is a glyph for this rune.
  # 
  # typeface - object
  # char1    - string 'char'
  #
  # Returns true, otherwise false.
}
proc pix::font::layoutBounds {object text} {
  # Computes the width and height of the arrangement in pixels.
  # Computes the width and height of the text in pixels.
  # Computes the width and height of the spans in pixels.
  # 
  # object - arrangement, font or span object 
  # text   - string (if font object)
  #
  # Returns Tcl dict value {x y}.
}
proc pix::font::lineGap {typeface} {
  # The font line gap value in font units.
  # 
  # typeface - object 
  #
  # Returns Tcl double value.
}
proc pix::font::lineHeight {typeface} {
  # The default line height in font units.
  # 
  # typeface - object 
  #
  # Returns Tcl double value.
}
proc pix::font::name {typeface} {
  # Returns the name of the font.
  # 
  # typeface - object 
}
proc pix::font::parseOtf {buffer} {
  # Parse Otf string.
  # 
  # buffer - string
  #
  # Returns a 'new' typeFace object.
}
proc pix::font::parseSvgFont {buffer} {
  # Parse Svg Font string.
  # 
  # buffer - string
  #
  # Returns a 'new' typeFace object.
}
proc pix::font::parseTtf {buffer} {
  # Parse Ttf string.
  # 
  # buffer - string
  #
  # Returns a 'new' typeFace object.
}
proc pix::font::scale {object} {
  # The scale factor to transform font units into pixels.
  # 
  # object - font or typeFace object
  #
  # Returns Tcl double value.
}
proc pix::font::typeset {object {args {}} bounds hAlign vAlign wrap} {
  # Lays out the character glyphs and returns the arrangement.
  # 
  # object - font or span object
  # args   - dict options described below: <br>
  #   bounds  - list coordinates<br>
  #   hAlign  - Enum value<br>
  #   vAlign  - Enum value<br>
  #   wrap    - boolean value<br>
  # 
  #
  # Returns a 'new' arrangement object.
}
proc pix::font::configure {font args} {
  # Configure <font> parameters.
  # 
  # font - object
  # args - dict options described below: <br>
  #   noKerningAdjustments  - boolean value <br>
  #   underline             - boolean value <br>
  #   strikethrough         - boolean value <br>
  #   size                  - double value <br>
  #   lineHeight            - double value <br>
  #   paint                 - Html color <br>
  #   color                 - Simple color <br>
  # 
  # Returns nothing.
}
proc pix::font::selectionRects {arrangement} {
  # Gets coordinates rectangle for 'arrangement' object.
  # 
  # arrangement - object
  #
  # Returns Tcl dict value (x, y, w, h).
}
proc pix::font::destroy {value} {
  # Destroy current font or all fonts if special word `all` is specified.
  # 
  # value - font object or string 
  #
  # Returns nothing.
}
