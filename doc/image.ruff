# File generated by pixdoc.tcl
namespace eval ::pix {
            namespace eval img {
                # Ruff documentation
                variable _ruff_preamble {}
            }
        }
proc pix::img::new {size} {
  # Sets a new image.
  # 
  # size  - list width + height
  #
  # Returns a 'new' img object.
}
proc pix::img::copy {image} {
  # New image copy.
  # 
  # image - object
  #
  # Returns a 'new' img object.
}
proc pix::img::draw {image image2 {matrix3 {mat3}} {blendMode {NormalBlend}}} {
  # Draws one image onto another using a matrix transform and color blending.
  # 
  # image     - object
  # image2    - object
  # matrix3   - list 
  # blendMode - Enum value 
  #
  # Returns nothing.
}
proc pix::img::fill {image value} {
  # Fills the image with the color.
  # 
  # image   - object
  # value   - string color or <paint> object
  #
  # Returns nothing.
}
proc pix::img::readImage {filePath} {
  # Fills the image with the color.
  # 
  # filePath - path file
  #
  # Returns a 'new' img object.
}
proc pix::img::fillPath {image pathValue paintValue {matrix {mat3}}} {
  # Fills a path.
  # 
  # image      - object
  # pathValue  - string path  or path object
  # paintValue - string color or paint object
  # matrix     - list 
  #
  # Returns nothing.
}
proc pix::img::strokePath {image value color options} {
  # Strokes a path.
  # 
  # image   - object
  # value   - string path
  # color   - string
  # options - dict (strokeWidth, transform, lineCap, miterLimit, lineJoin, dashes)
  #
  # Returns nothing.
}
proc pix::img::blur {image radius {color {transparent}}} {
  # Applies Gaussian blur to the image given a radius.
  # 
  # image   - object
  # radius  - double value
  # color   - string 
  #
  # Returns nothing.
}
proc pix::img::shadow {image options} {
  # Create a shadow of the image with the offset, spread and blur.
  # 
  # image   - object
  # options - dict (offset, spread, blur, color)
  #
  # Returns nothing.
}
proc pix::img::fillText {image object args} {
  # Fills image text.
  # 
  # image        - object
  # object       - arrangement or font object
  # args         - dict options described below:
  #
  # matrix       - optional list if `object` is arrangement `object`
  # text         - string if `object` is font `object`
  # options      - dict (transform, bounds, hAlign, vAlign)  if `object` is font `object`
  #
  # Returns nothing.
}
proc pix::img::resize {image size} {
  # Resize an image to a given height and width
  # 
  # image  - object
  # size   - list width + height
  #
  # Returns nothing.
}
proc pix::img::get {image} {
  # Gets image size.
  # 
  # image - object
  #
  # Returns Tcl dict (width, height).
}
proc pix::img::getPixel {image coordinates} {
  # Gets a pixel at (x, y) or returns transparent black if outside of bounds.
  # 
  # image        - object
  # coordinates  - list x,y
  #
  # Returns Tcl dict (r, g, b, a).
}
proc pix::img::setPixel {image coordinates color} {
  # Gets a pixel at (x, y) or returns transparent black if outside of bounds.
  # 
  # image       - object
  # coordinates - list x,y 
  # color       - string color
  #
  # Returns nothing.
}
proc pix::img::applyOpacity {image opacity} {
  # Multiplies alpha of the image by opacity.
  # 
  # image    - object
  # opacity  - double value
  #
  # Returns nothing.
}
proc pix::img::ceil {image} {
  # A value of 0 stays 0. Anything else turns into 255.
  # 
  # image - object
  #
  # Returns nothing.
}
proc pix::img::diff {masterimage image} {
  # Compares the parameters and returns a score and image of the difference. 
  # 
  # masterimage - object
  # image       - object
  #
  # Returns Tcl dict (score, imgdiff).
}
proc pix::img::flipHorizontal {image} {
  # Flips the image around the Y axis.
  # 
  # image - object
  #
  # Returns nothing.
}
proc pix::img::flipVertical {image} {
  # Flips the image around the X axis.
  # 
  # image - object
  #
  # Returns nothing.
}
proc pix::img::getColor {image coordinates} {
  # Gets a color at (x, y) or returns transparent black if outside of bounds.
  # 
  # image        - object
  # coordinates  - list x,y
  #
  # Returns Tcl dict (r, g, b, a).
}
proc pix::img::inside {image coordinates} {
  # Returns true if (x, y) is inside the image, false otherwise.
  # 
  # image        - object
  # coordinates  - list x,y
  #
}
proc pix::img::invert {image} {
  # Inverts all of the colors and alpha.
  # 
  # image - object
  #
  # Returns nothing.
}
proc pix::img::isOneColor {image} {
  # Checks if the entire image is the same color.
  # 
  # image - object
  #
  # Returns true, false otherwise.
}
proc pix::img::isOpaque {image} {
  # Checks if the entire image is opaque (alpha values are all 255). 
  # 
  # image - object
  #
  # Returns true, false otherwise.
}
proc pix::img::isTransparent {image} {
  # Checks if this image is fully transparent or not.
  # 
  # image - object
  #
  # Returns true, false otherwise.
}
proc pix::img::magnifyBy2 {image {power {1}}} {
  # Scales image up by 2 ^ power.
  # 
  # image  - object
  # power  - integer value 
  #
  # Returns a 'new' img object.
}
proc pix::img::minifyBy2 {image {power {1}}} {
  # Scales the image down by an integer scale.
  # 
  # image  - object
  # power  - integer value 
  #
  # Returns a 'new' img object.
}
proc pix::img::opaqueBounds {image} {
  # Checks the bounds of opaque pixels. Some images have transparency around them,
  # use this to find just the visible part of the image and then use subImage to cut
  # it out. Returns zero rect if whole image is transparent,
  # or just the size of the image if no edge is transparent.
  # 
  # image - object
  #
  # Returns Tcl dict (x, y, w, h).
}
proc pix::img::rotate90 {image} {
  # Rotates the image 90 degrees clockwise.
  # 
  # image - object
  #
  # Returns nothing.
}
proc pix::img::subImage {image coordinates size} {
  # Gets a sub image from this image.
  # 
  # image        - object
  # coordinates  - list x,y
  # size         - list width + height
  #
  # Returns a 'new' img object.
}
proc pix::img::superImage {image coordinates size} {
  # Either cuts a sub image or returns a super image with padded transparency.
  # 
  # image        - object
  # coordinates  - list x,y
  # size         - list width + height
  #
  # Returns a 'new' img object.
}
proc pix::img::fillGradient {image paint} {
  # Fills with the Paint gradient.
  # 
  # image  - object
  # paint  - object
  #
  # Returns nothing.
}
proc pix::img::strokeText {image object text {arroptions {}} {fontoptions {}}} {
  # Strocks image text.
  # 
  # image       - object
  # object      - arrangement object or font object
  # text        - string if `object` is font object
  # arroptions  - dict (transform:list, strokeWidth:double, lineCap:enum, lineJoin:enum, miterLimit:double, dashes:list) 
  # fontoptions - dict (transform:list, bounds:list, hAlign:enum, vAlign:enum) 
  #
  # Returns nothing.
}
proc pix::img::writeFile {image filePath} {
  # Save image file.
  # 
  # image    - object
  # filePath - string (\*.png|\*.bmp|\*.jpeg|\*.qoi|\*.ppm)
  #
  # Returns nothing.
}
proc pix::img::destroy {value} {
  # Destroy current image or all images if special word `all` is specified.
  # 
  # value - image object or string 
  #
  # Returns nothing.
}
