# File generated by pixdoc.tcl
namespace eval ::pix {
            variable _ruff_preamble "Help procedures."
        }
proc pix::colorHTMLtoRGBA {HTMLcolor} {
  # Converts an HTML color into an RGBA value and returns it as a Tcl list.
  #
  # HTMLcolor - string
  #
  # Returns: A Tcl list.
}
proc pix::pathObjToString {path} {
  # Parse [path] object.
  #
  # path - [path::new]
  #
  # Returns: The parsed [path] to SVG style path (string).
}
proc pix::svgStyleToPathObj {path} {
  # Transforms a SVG style path (string) to a [path::new] object.
  #
  # path - a string in SVG style.
  #
  # Returns: A *new* [path] object.
}
proc pix::getKeys {} {
  # Get all objects from the context and the image.
  #
  # Returns: A Tcl dictionary with two keys:
  # `ctx` a Tcl list of all [ctx] keys and
  # `img` a Tcl list of all [img] keys.
}
proc pix::toB64 {object} {
  # Convert an [img] object to base 64.
  #
  # object - [img] or [ctx] object.
  #
  # On the Nim side, `base64` module is considered **unstable**,
  # so use the [toBinary] command instead
  # and then Tcl's binary encode base64 command.
  #
  # Returns string.
}
proc pix::toBinary {object {format {png}}} {
  # Convert an [img] object to binary.
  #
  # object - [img] or [ctx] object.
  # format - string (png, qoi, bmp, ppm) .
  #
  # Returns: A string in binary format.
}
proc pix::rotMatrix {angle {matrix {}}} {
  # Create rotation matrix.
  #
  # angle   - double value (radian)
  # matrix  - list (9 values) 
  #
  # Returns: The matrix rotation as a list.
}
proc pix::scaleMatrix {scale {matrix {}}} {
  # Create scale matrix.
  #
  # scale   - list x,y
  # matrix  - list (9 values) 
  #
  # Returns: The matrix scaled as a list.
}
proc pix::transMatrix {trans {matrix {}}} {
  # Create translation matrix.
  #
  # trans   - list x,y
  # matrix  - list (9 values) 
  #
  # Returns: The matrix translated as a list.
}
proc pix::mulMatrix {args} {
  # Multiplies matrices.
  #
  # args - matrix (9 values)
  #
  # Returns: The multiplied matrix as a list.
}
proc pix::color::rgba {r g b a} {
  # Sets a new rgba color object.
  #
  # r - integer (0-255)
  # g - integer (0-255)
  # b - integer (0-255)
  # a - double (0-1)
  #
  # Returns: A *new* type [color] object.
}
proc pix::color::rgb {r g b} {
  # Sets a new rgb color object.
  #
  # r - integer (0-255)
  # g - integer (0-255)
  # b - integer (0-255)
  #
  # Returns: A *new* type [color] object.
}
proc pix::color::hexHTML {hex} {
  # Sets a new hex html color object.
  #
  # hex  - hex string
  #
  # Returns: A *new* type [color] object.
}
proc pix::color::name {name} {
  # Sets a new name color object.
  #
  # name  - HTML name
  #
  # Returns: A *new* type [color] object.
}
proc pix::color::darken {color amount} {
  # Darkens the color by amount 0-1.
  #
  # color   - color or colorObj [color]
  # amount  - double value (0-1)
  #
  # Returns: A *new* type [color] object.
}
proc pix::color::lighten {color amount} {
  # Lightens the color by amount 0-1.
  #
  # color   - color or colorObj [color]
  # amount  - double value (0-1)
  #
  # Returns: A *new* type [color] object.
}
proc pix::color::desaturate {color amount} {
  # Desaturate (makes grayer) the color by amount 0-1.
  #
  # color   - color or colorObj [color]
  # amount  - double value (0-1)
  #
  # Returns: A *new* type [color] object.
}
proc pix::color::distance {color1 color2} {
  # A distance function based on CIEDE2000 color difference formula.
  #
  # color1   - color or colorObj [color]
  # color2   - color or colorObj [color]
  #
  # Returns: A distance.
}
proc pix::color::almostEqual {color1 color2 {epsilon {0.01}}} {
  # Almost equal colors.
  #
  # color1   - color or colorObj [color]
  # color2   - color or colorObj [color]
  # epsilon  - double value 
  #
  # Returns: True if colors are close.
}
proc pix::color::mix {color1 color2 {lerp {}}} {
  # Mixes two colours using simple averaging or simple lerp if the “lerp” argument is specified.
  #
  # color1   - color or colorObj [color]
  # color2   - color or colorObj [color]
  # lerp     - double value 
  #
  # Returns: A *new* type [color] object.
}
