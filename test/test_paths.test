lappend auto_path [file dirname [file dirname [file dirname [info script]]]]

# source all.tcl
if {[catch {package present pix}]} {package require pix}

# Test 0
set testPath [pix::svgStyleToPathObj "m 1 2 3 4 5 6"]
if {[pix::pathObjToString $testPath] ne "m1 2 l3 4 l5 6"} {
    error "parse pix::pathObjToString"
}

# Test 1
set image [pix::img::new {100 100}]
set pathStr "M 10 10 L 90 90"
set color "rgba(255, 0, 0, 1)"

pix::img::strokePath $image $pathStr $color {strokeWidth 10}

# Test 2
set image [pix::img::new {100 100}]
set pathStr "M 10 10 L 50 60 90 90"
set color "rgba(255, 0, 0, 1)"

pix::img::strokePath $image $pathStr $color {strokeWidth 10}

# Test 3
set image [pix::img::new {100 100}]
set pathStr "M 15 10 L 30 90 60 30 90 90"
set color "rgba(255, 0, 0, 1)"

pix::img::strokePath $image $pathStr $color {strokeWidth 10}

# Test 4
set image [pix::img::new {100 100}]
set pathStr "M 10 10 H 90 V 90 H 10 L 10 10"
set color "rgba(0, 0, 0, 1)"

pix::img::fillPath $image $pathStr $color

# Test 5
set image [pix::img::new {100 100}]
set pathStr "M 10 10 H 90 V 90 H 10 Z"
set color "rgba(0, 0, 0, 1)"

pix::img::fillPath $image $pathStr $color

# Test 6
set image [pix::img::new {100 100}]
set path [pix::path::new]
pix::path::moveTo $path {10 10}
pix::path::lineTo $path {10 90}
pix::path::lineTo $path {90 90}
pix::path::lineTo $path {90 10}
pix::path::lineTo $path {10 10}

set color "rgba(255, 0, 0, 1)"

pix::img::fillPath $image $path $color

# Test 7
set image [pix::img::new {100 100}]
set path {
    M 10,30
    A 20,20 0,0,1 50,30
    A 20,20 0,0,1 90,30
    Q 90,60 50,90
    Q 10,60 10,30 z
}

pix::img::fillPath $image $path "#FC427B"

# Test 8
set image [pix::img::new {200 200}]
pix::img::fill $image "rgba(255,255,255,1)"

set path [pix::svgStyleToPathObj "M1 0.5C1 0.776142 0.776142 1 0.5 1C0.223858 1 0 0.776142 0 0.5C0 0.223858 0.223858 0 0.5 0C0.776142 0 1 0.223858 1 0.5Z"]

pix::img::fillPath   $image [pix::pathObjToString $path] "rgba(255,0,0,1)" {200 0 0 0 200 0 0 0 1}
pix::img::strokePath $image [pix::pathObjToString $path] "rgba(0,255,0,1)" {transform {200 0 0 0 200 0 0 0 1} strokeWidth 0.01}

# Test 9
set image [pix::img::new {60 60}]
pix::img::fill $image "rgba(255,255,255,1)"

set path {M 3 3 L 20 3 L 20 20 L 3 20 Z}

pix::img::strokePath $image $path "rgba(0,0,0,1)" {transform {1 0 0 0 1 0 10 10 1} strokeWidth 10 lineCap "RoundCap" lineJoin "RoundJoin"}

# Test 10
set image [pix::img::new {60 120}]
pix::img::fill $image "rgba(255,255,255,1)"

set path {M 0 0 L 50 0}

pix::img::strokePath $image $path "rgba(0,0,0,1)" {transform {1 0 0 0 1 0 5 5 1}   strokeWidth 10 lineCap "ButtCap" lineJoin "BevelJoin"}
pix::img::strokePath $image $path "rgba(0,0,0,1)" {transform {1 0 0 0 1 0 5 25 1}  strokeWidth 10 lineCap "ButtCap" lineJoin "BevelJoin"}
pix::img::strokePath $image $path "rgba(0,0,0,1)" {transform {1 0 0 0 1 0 5 45 1}  strokeWidth 10 lineCap "ButtCap" lineJoin "BevelJoin"}
pix::img::strokePath $image $path "rgba(0,0,0,1)" {transform {1 0 0 0 1 0 5 65 1}  strokeWidth 10 lineCap "ButtCap" lineJoin "BevelJoin"}
pix::img::strokePath $image $path "rgba(0,0,0,1)" {transform {1 0 0 0 1 0 5 85 1}  strokeWidth 10 lineCap "ButtCap" lineJoin "BevelJoin" dashes {1}}
pix::img::strokePath $image $path "rgba(0,0,0,1)" {transform {1 0 0 0 1 0 5 105 1} strokeWidth 10 lineCap "ButtCap" lineJoin "BevelJoin" dashes {1 2 3 4 5 6 7 8 9}}

# Test 11
set path [pix::path::new]
pix::path::rect $path {0 0} {10 10}

if {![pix::path::fillOverlaps $path {5 5}]} {
    error "Coordinates {5 5} should be in path."
}
if {![pix::path::fillOverlaps $path {0 0}]} {
    error "Coordinates {0 0} should be in path."
}
if {![pix::path::fillOverlaps $path {9 0}]} {
    error "Coordinates {9 0} should be in path."
}
if {![pix::path::fillOverlaps $path {9 0}]} {
    error "Coordinates {0 9} should be in path."
}
if {[pix::path::fillOverlaps $path {10 10}]} {
    error "Coordinates {10 10} should not be in path."
}

# Test 12
set path [pix::path::new]
pix::path::ellipse $path {20 20} 20 10

if {[pix::path::fillOverlaps $path {0 0}]} {
    error "Coordinates {0 0} should not be in path."
}
if {![pix::path::fillOverlaps $path {20 20}]} {
    error "Coordinates {20 20} should be in path."
}
if {![pix::path::fillOverlaps $path {10 20}]} {
    error "Coordinates {10 20} should be in path."
}
if {![pix::path::fillOverlaps $path {30 20}]} {
    error "Coordinates {30 20} should be in path."
}

# Test 13
set path [pix::path::new]
pix::path::rect $path {10 10} {10 10}

if {![pix::path::strokeOverlaps $path {10 10}]} {
    error "Coordinates {10 10} should not be in path."
}
if {![pix::path::strokeOverlaps $path {20.1 20.1}]} {
    error "Coordinates {20.1 20.1} should not be in path."
}
if {[pix::path::strokeOverlaps $path {5 5}]} {
    error "Coordinates {5 5} should be in path."
}

# Test 14
set path [pix::path::new]
pix::path::ellipse $path {20 20} 20 10

if {[pix::path::strokeOverlaps $path {0 0}]} {
    error "Coordinates {0 0} should not be in path."
}
if {[pix::path::strokeOverlaps $path {20 20}]} {
    error "Coordinates {20 20} should not be in path."
}
if {![pix::path::strokeOverlaps $path {0 20}]} {
    error "Coordinates {0 20} should be in path."
}
if {![pix::path::strokeOverlaps $path {39.9 19.9}]} {
    error "Coordinates {39.9 19.9} should be in path."
}
if {![pix::path::strokeOverlaps $path {19.8 30.2}]} {
    error "Coordinates {39.9 19.9} should be in path."
}
if {[pix::path::strokeOverlaps $path {19.4 30.6}]} {
    error "Coordinates {19.4 30.6} should not be in path."
}

# Test 15
set path [pix::path::new]
pix::path::circle $path {50 50} 30

set paint [pix::paint::new "SolidPaint"]
pix::paint::configure $paint {color "rgba(255,0,255,128)" opacity 0.5}

set image [pix::img::new {100 100}]
pix::img::fillPath $image $path $paint